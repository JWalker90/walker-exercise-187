/* AUTHOR: Jonathan Walker
 * COURSE: CPT187
 * PURPOSE: This is a retail store point of sale program that loads an inventory list from a file, calculates transactions and displays order reports,
 * collects statistics which are used to generate a final sales report upon quitting, and keeps track of item stock levels. Utilizes a user account system.
 * Also saves information pertaining to individual transactions and user accounts in two master files.
 * STARTDATE: 02/16/21
 */

package edu.cpt187.walker.exercise6;

import java.util.Scanner;

public class MainClass
{
	// class constants
	public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
	public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Quit"};
	public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
	public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
	public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
	public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
	public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

	public static void main(String[] args)
	{
		// variable
		String userName = "";
		char menuSelection = ' ';

		// objects
		Inventory currentInventory = new Inventory();
		Order currentOrder = new Order();
		WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
		UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
		Scanner input = new Scanner(System.in);

		displayWelcomeBanner();
		menuSelection = validateMenuSelection(input);
		// run-while loop
		while (menuSelection != 'Q')
		{
			currentUser.setUserAccountArrays();
			userName = getUserName(input);
			if (menuSelection != 'A')// create user account option
			{
				currentUser.setSearchedIndex(userName);
				if (currentUser.getSearchedIndex() >= 0)// test for pre-existing username
				{
					displayAccountResults(userName);
				}// END if for pre-existing username
				else
				{
					currentUser.setWriteOneRecord(userName, getPassword(input));
					displayAccountResults();
				}// END else
			}// END if for create user account option
			else// login option
			{
				currentUser.setSearchedIndex(userName, getPassword(input));
				if (currentUser.getSearchedIndex() < 0)// test for login error
				{
					displayLoginError();
				}// END if for login error
				else// enter file menu loop
				{
					menuSelection = validateFileSelection(input);
					while (menuSelection != 'R')// file menu loop
					{
						if (menuSelection == 'A')// load inventory option
						{
							currentInventory.setLoadItems(getFileName(input));
							if (currentInventory.getRecordCount() <= 0)// test for file error
							{
								displayFileError();
							}// END if for test for file error
							else
							{
								displayRecordReport(currentInventory.getRecordCount());
							}// END else
						}// END if for load inventory option
						else// create order option
						{
							currentInventory.setSearchIndex(validateSearchValue(input));
							if (currentInventory.getItemSearchIndex() < 0)// test for item not found
							{
								displayNotFound();
							}// END if for test for item found
							else// create order process
							{
								currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
								currentOrder.setItemID(currentInventory.getItemIDs());
								currentOrder.setItemPrice(currentInventory.getItemPrices());
								currentOrder.setItemName(currentInventory.getItemNames());
								currentOrder.setHowMany(validateHowMany(input));
								if (currentOrder.getInStockCount(currentInventory.getInStockCounts()) < currentOrder.getHowMany())// test for out of stock
								{
									displayOutOfStock();
								}// END if for test for out of stock
								else// complete order process
								{
									currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory
											.getDiscountRates()));
									currentOrder.setDiscountName(currentInventory.getDiscountNames());
									currentOrder.setDiscountRate(currentInventory.getDiscountRates());
									currentOrder.setDecreaseInStock(currentInventory);
									currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
									orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder
											.getHowMany(), currentOrder.getTotalCost());// write order data to file
									if (currentOrder.getDiscountRate() > 0.0)// if a discount rate is applied, display order report with discount
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getDiscountName(), currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder
														.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(),
												currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory
														.getInStockCounts()));
									}// END if for order report with discount
									else// order report without discount
									{
										displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(),
												currentOrder.getSubTotal(), currentOrder.getTaxRate(), currentOrder.getTaxAmt(), currentOrder.getTotalCost(),
												currentOrder.getPrizeName(), currentOrder.getInStockCount(currentInventory.getInStockCounts()));
									}// END else for order report without discount
								}// END else for complete order process
							}// END else for create order process
						}// END else for create order option
						menuSelection = validateFileSelection(input);
					}// END while for file menu loop
				}// END else for enter file menu loop
			}// END else for login option
			menuSelection = validateMenuSelection(input);// modify run-while LCV
		}// END run-while loop

		currentInventory.setLoadItems(orders.getFileName(), orders.getRecordCount());
		if (orders.getRecordCount() > 0)// display final report if any orders have been written to file
		{
			displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory
					.getOrderQuantities(), currentInventory.getOrderTotals(), currentInventory.getRecordCount(), currentInventory.getGrandTotal());
		}// END if for final report

		displayFarewellMessage();
		input.close();// close scanner
	}// END main method

	// void methods
	public static void displayWelcomeBanner()
	{
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Welcome to the Store Sales Program.");
		System.out.println("Here you can calculate transactions with discounts applied.");
		System.out.println("A report is displayed for each order created.");
		System.out.println("After quitting, a final sales report is generated.");
		System.out.println("To begin, please login or create an account.");
		System.out.println("------------------------------------------------------------");
		System.out.println("NOTE: You must use the \"Load Inventory\" command before");
		System.out.println("creating orders or you will get a NOT FOUND error.");
	}// END displayWelcomeBanner

	public static void displayFarewellMessage()
	{
		System.out.println("\nThank you for using the Store Sales Program.");
		System.out.println("Goodbye!");
	}// END displayFarewellMessage

	public static void displayMainMenu()
	{
		int localIndex = 0;
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("MAIN MENU");
		while (localIndex < MENU_CHARS.length)// display contents of menu element arrays
		{
			System.out.printf("%s%s%s\n", MENU_CHARS[localIndex], " for ", MENU_OPTIONS[localIndex]);
			localIndex++;
		}// END while
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}// END displayMainMenu

	public static void displayFileMenu()
	{
		int localIndex = 0;
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE MENU");
		while (localIndex < FILE_MENU_CHARS.length)// display contents of menu element arrays
		{
			System.out.printf("%s%s%s\n", FILE_MENU_CHARS[localIndex], " for ", FILE_MENU_OPTIONS[localIndex]);
			localIndex++;
		}// END while
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your selection here: ");
	}// END displayFileMenu

	public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		int localIndex = 0;
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("DISCOUNT MENU");
		while (localIndex < borrowedDiscountNames.length)// display contents of menu element arrays
		{
			System.out.printf("%s%s%-23s%7.1f%s\n", SUB_MENU_CHARS[localIndex], " for ", borrowedDiscountNames[localIndex], borrowedDiscountRates[localIndex]
					* 100, " %");
			localIndex++;
		}// END while
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Please make your selection here: ");
	}// END displayDiscountMenu

	public static void displayRecordReport(int borrowedRecordCount)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("RECORD REPORT");
		System.out.printf("%d%s\n", borrowedRecordCount, " records processed");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// END displayRecordReport

	public static void displayFileError()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("FILE ERROR");
		System.out.println("The file named was not found or could not be opened");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// END displayFileError

	public static void displayNotFound()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("NOT FOUND ERROR");
		System.out.println("The search value entered was not found");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// END displayNotFound

	public static void displayOutOfStock()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("OUT OF STOCK ERROR");
		System.out.println("The quantity entered is greater than the quantity in-stock");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// END displayOutOfStock

	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,
			double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName,
			int borrowedInStockCount)// order report without discount
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-29s%-12s\n", "Customer Name:", borrowedUserName);
		System.out.printf("\n%-29s%-12s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-29s%s%7.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("\n%-29s%8d\n", "Quantity:", borrowedHowMany);
		System.out.printf("\n%-29s%s%7.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-30s%6.1f%s\n", "Tax Rate:", borrowedTaxRate * 100, " %");
		System.out.printf("%-29s%s%7.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.printf("\n%-29s%s%7.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("\n%-29s%-12s\n", "Prize:", borrowedPrizeName);
		System.out.printf("\n%s%d%s%s%s\n", "Buy more now: Only ", borrowedInStockCount, " ", borrowedItemName, "s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}// END displayOrderReport without discount

	public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,
			String borrowedDiscountName, double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal,
			double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)// order report with discount
	{
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("ORDER REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-29s%-12s\n", "Customer Name:", borrowedUserName);
		System.out.printf("\n%-29s%-12s\n", "Item Name:", borrowedItemName);
		System.out.printf("%-29s%s%7.2f\n", "Item Price:", "$", borrowedItemPrice);
		System.out.printf("\n%-29s%-12s\n", "Discount Name:", borrowedDiscountName);
		System.out.printf("%-30s%6.1f%s\n", "Discount Rate:", borrowedDiscountRate * 100, " %");
		System.out.printf("%-29s%s%7.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
		System.out.printf("%-29s%s%7.2f\n", "Discount Price:", "$", borrowedDiscountPrice);
		System.out.printf("\n%-29s%8d\n", "Quantity:", borrowedHowMany);
		System.out.printf("\n%-29s%s%7.2f\n", "Subtotal:", "$", borrowedSubTotal);
		System.out.printf("%-30s%6.1f%s\n", "Tax Rate:", borrowedTaxRate * 100, " %");
		System.out.printf("%-29s%s%7.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
		System.out.printf("\n%-29s%s%7.2f\n", "Order Total:", "$", borrowedTotalCost);
		System.out.printf("\n%-29s%-12s\n", "Prize:", borrowedPrizeName);
		System.out.printf("\n%s%d%s%s%s\n", "Buy more now: Only ", borrowedInStockCount, " ", borrowedItemName, "s left in-stock!");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}// END displayOrderReport with discount

	public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities,
			double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal)
	{
		int localIndex = 0;
		System.out.println("\n~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.println("FINAL REPORT");
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
		System.out.printf("%-5s%-22s%-14s%-7s%-12s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
		while (localIndex < borrowedRecordCount)// display contents of arrays
		{
			System.out.printf("%-5d%-22s%-3s%7.2f%4s%-3d%5s%9.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$",
					borrowedItemPrices[localIndex], "", borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
			localIndex++;
		}// END while
		System.out.println("\nGRAND TOTAL");
		System.out.printf("%s%9.2f\n", "$", borrowedGrandTotal);
		System.out.println("~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ~~~~ ");
	}// END displayFinalReport

	public static void displayAccountResults()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("New account created");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// END displayAccountResults

	public static void displayAccountResults(String borrowedUserName)// overloaded
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("ACCOUNT RESULTS");
		System.out.println("Account not created: username, " + borrowedUserName + ", already exists");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// END displayAccountResults overloaded

	public static void displayLoginError()
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.println("Username and/or Password is incorrect");
		System.out.println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
	}// END displayLoginError

	// VR methods
	public static String getUserName(Scanner borrowedInput)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your username: ");
		return borrowedInput.next();
	}// END getUserName

	public static String getPassword(Scanner borrowedInput)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter your password: ");
		return borrowedInput.next();
	}// END getPassword

	public static String getFileName(Scanner borrowedInput)
	{
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the file name with extension (i.e. file.txt): ");
		return borrowedInput.next();
	}// END getFileName

	public static char validateMenuSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayMainMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		while (localSelection != MENU_CHARS[0] && localSelection != MENU_CHARS[1] && localSelection != MENU_CHARS[2])// input validation loop
		{
			System.out.println("\nError. Please enter a valid selection.");
			displayMainMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		} // END while
		return localSelection;
	}// END validateMenuSelection

	public static char validateFileSelection(Scanner borrowedInput)
	{
		char localSelection = ' ';
		displayFileMenu();
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		while (localSelection != FILE_MENU_CHARS[0] && localSelection != FILE_MENU_CHARS[1] && localSelection != FILE_MENU_CHARS[2])// input validation loop
		{
			System.out.println("\nError. Please enter a valid selection.");
			displayFileMenu();
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		} // END while
		return localSelection;
	}// END validateFileSelection

	public static int validateSearchValue(Scanner borrowedInput)
	{
		String localSearchValue = "";
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter the search value: ");
		localSearchValue = borrowedInput.next();
		while (Integer.parseInt(localSearchValue) <= 0)// input validation loop
		{
			System.out.println("\nError. Invalid input. Please try again.");
			System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter the search value: ");
			localSearchValue = borrowedInput.next();
		}// END while
		return Integer.parseInt(localSearchValue);
	}// END validateSearchValue

	public static String validateHowMany(Scanner borrowedInput)
	{
		String localHowMany = "";
		System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
		System.out.print("Enter item quantity: ");
		localHowMany = borrowedInput.next();
		while (Integer.parseInt(localHowMany) <= 0)// input validation loop
		{
			System.out.println("\nError. Invalid input. Please try again.");
			System.out.println("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
			System.out.print("Enter item quantity: ");
			localHowMany = borrowedInput.next();
		}// END while
		return localHowMany;
	}// END validateHowMany

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{
		char localSelection = ' ';
		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
		localSelection = borrowedInput.next().toUpperCase().charAt(0);
		while (localSelection != SUB_MENU_CHARS[0] && localSelection != SUB_MENU_CHARS[1] && localSelection != SUB_MENU_CHARS[2])// input validation loop
		{
			System.out.println("\nError. Please enter a valid selection.");
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localSelection = borrowedInput.next().toUpperCase().charAt(0);
		}// END while
		return localSelection;
	}// END validateDiscountMenu

}// END main class
